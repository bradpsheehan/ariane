{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Ariane\r\n\r\nAriane is a flexible breadcrumb system for Rails. And it's fully compatible with \r\nthe [Twitter Bootstrap](http://twitter.github.com/bootstrap/) !\r\n\r\nIt works perfectly with Rails 3 and allows to use I18n.\r\n\r\n## Installation\r\n\r\nAdd the following line to your `Gemfile`:\r\n\r\n``` ruby\r\ngem 'ariane'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    bundle\r\n\r\n## Requirements\r\n\r\n* Ruby >= 1.9.x\r\n\r\n## Quickstart\r\n\r\nTo get started, define a before_filter in your `ApplicationController` and use\r\nit to add the first entry:\r\n\r\n``` ruby\r\nclass ApplicationController < ActionController::Base\r\n  before_filter :set_ariane\r\n\r\n  protected\r\n\r\n  def set_ariane\r\n    ariane.add 'Home', root_path\r\n  end\r\nend\r\n```\r\n\r\nYou can then add more entries from your other controllers:\r\n\r\n``` ruby\r\nclass OtherController < ApplicationController\r\n  protected\r\n\r\n  def set_ariane\r\n    super\r\n    ariane.add 'Other', other_path\r\n  end\r\nend\r\n```\r\n\r\nThen in your layout, simply call `ariane.render` to see the magic happen:\r\n\r\n``` erb\r\n<%= ariane.render %>\r\n```\r\n\r\nThis will render the following:\r\n\r\n``` html\r\n<ul class=\"breadcrumb\">\r\n  <li>\r\n    <a href=\"/\">Home</a>\r\n    <span class=\"divider\">/</span>\r\n  </li>\r\n  <li class=\"active\">Other</li>\r\n</ul>\r\n```\r\n## ariane.add\r\n\r\n`ariane.add` takes two arguments, both being optional.\r\n\r\n* `text` is the text to use as link text\r\n* `url` is the path to where you want the link to point\r\n\r\nNote that if you don't set the url, the text will simply be rendered as is.\r\n\r\nAlternatively, you can pass a block to `ariane.add`. The block will receive the new crumb as argument.\r\n\r\n``` ruby\r\nariane.add do |crumb|\r\n  crumb.text = 'Home'\r\n  crumb.url  = root_path\r\nend\r\n```\r\n\r\n## Customize the output\r\n\r\nAriane provides a set of renderers you can use to generate the output. To see\r\nthe options you can use with each renderer, take a look at the wiki.\r\n\r\nThe default renderer is `HTMLList` but you can select another one.\r\n\r\n### Using ariane.render\r\n\r\nYou can choose the renderer when calling `ariane.render` by passing it as the\r\nfirst argument:\r\n\r\n``` erb\r\n<%= ariane.render(Ariane::Render::HTML) %>\r\n```\r\n\r\nThis will render the following text:\r\n\r\n``` html\r\n<p class=\"breadcrumb\">\r\n  <a href=\"/\">Home</a> / Other\r\n</p>\r\n```\r\n\r\n### Using an initializer\r\n\r\nYou may also choose to set the renderer when Rails is loaded:\r\n\r\n``` ruby\r\n# config/initializers/ariane.rb\r\nAriane.configure do |config|\r\n  config.default_renderer = Ariane::Render::HTML\r\nend\r\n```\r\n\r\nIf you want further customization, you can instanciate the renderer and then use\r\nit in `Ariane.configure`.\r\n\r\n``` ruby\r\n# config/initializers/ariane.rb\r\nrndr = Ariane::Render::HTML.new(divider: ' | ')\r\n\r\nAriane.configure do |config|\r\n  config.default_renderer = rndr\r\nend\r\n```\r\n\r\nCalling `ariane.render` will output the following HTML:\r\n\r\n```\r\n<p class=\"breadcrumb\">\r\n  <a href=\"/\">Home</a> | Other\r\n</p>\r\n```\r\n\r\n## Bring your own Renderer\r\n\r\nAriane is flexible enough to let you define or extend renderers.\r\n\r\n``` ruby\r\nclass HTMLOrderedList < Ariane::Render::HTMLList\r\n  def list(crumbs)\r\n    content_tag(:ol, class: options[:list_class]) do\r\n      raw items(crumbs)\r\n    end\r\n  end\r\n\r\n  def divider\r\n    content_tag(:span, '|', class: 'separator')\r\n  end\r\nend\r\n```\r\n\r\nThis example is simple but shows that you can touch pretty anything in the\r\nrenderers.\r\n\r\nNow if you call\r\n\r\n``` erb\r\n<%= ariane.render(HTMLOrderedList) %>\r\n```\r\n\r\nYou'll obtain the following HTML:\r\n\r\n``` html\r\n<ol class=\"breadcrumb\">\r\n  <li>\r\n    <a href=\"/\">Home</a>\r\n    <span class=\"separator\">|</span>\r\n  </li>\r\n  <li class=\"active\">Other</li>\r\n</ul>\r\n```\r\n\r\n### Create a renderer from scratch\r\n\r\nYou can create a complete renderer, simply take a look at\r\n`lib/ariane/render/html.rb` for a complete example implementation.\r\n\r\n### I18n\r\n\r\nSince Ariane is used in before filters or in the views, it supports\r\nI18n out of the box.\r\n\r\n``` ruby\r\nariane.add t('home'), root_path\r\n```","google":"UA-33582072-1","name":"Ariane","tagline":"A flexible breadcrumb system for Rails"}